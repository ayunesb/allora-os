import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from "react";
import { Helmet } from "react-helmet-async";
import { PageErrorBoundary } from "@/components/errorHandling/PageErrorBoundary";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { Save } from "lucide-react";
export default function Notifications() {
    const [emailNotifications, setEmailNotifications] = useState({
        marketingEmails: true,
        productUpdates: true,
        securityAlerts: true,
        recommendationAlerts: false,
        weeklyDigest: true,
    });
    const [pushNotifications, setPushNotifications] = useState({
        newStrategies: true,
        newLeads: true,
        campaignUpdates: true,
        executiveDebates: false,
        systemAlerts: true,
    });
    const handleSaveSettings = () => {
        toast.success("Notification settings saved successfully");
    };
    return (_jsxs(_Fragment, { children: [_jsx(Helmet, { children: _jsx("title", { children: "Notifications - Allora AI" }) }), _jsx(PageErrorBoundary, { pageName: "Notifications", children: _jsxs("div", { className: "container mx-auto px-4 py-6", children: [_jsx("h1", { className: "text-2xl font-bold tracking-tight mb-6", children: "Notifications" }), _jsx("p", { className: "text-muted-foreground mb-8", children: "Manage your notification preferences and view recent alerts" }), _jsxs(Tabs, { defaultValue: "settings", className: "space-y-4", children: [_jsxs(TabsList, { children: [_jsx(TabsTrigger, { value: "settings", children: "Settings" }), _jsx(TabsTrigger, { value: "history", children: "Notification History" })] }), _jsxs(TabsContent, { value: "settings", className: "space-y-4", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Email Notifications" }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(Label, { htmlFor: "marketing", className: "flex flex-col space-y-1", children: [_jsx("span", { children: "Marketing Emails" }), _jsx("span", { className: "font-normal text-sm text-muted-foreground", children: "Receive updates about new features and promotions" })] }), _jsx(Switch, { id: "marketing", checked: emailNotifications.marketingEmails, onCheckedChange: (checked) => setEmailNotifications((prev) => (Object.assign(Object.assign({}, prev), { marketingEmails: checked }))) })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(Label, { htmlFor: "product-updates", className: "flex flex-col space-y-1", children: [_jsx("span", { children: "Product Updates" }), _jsx("span", { className: "font-normal text-sm text-muted-foreground", children: "Get notified about new platform features" })] }), _jsx(Switch, { id: "product-updates", checked: emailNotifications.productUpdates, onCheckedChange: (checked) => setEmailNotifications((prev) => (Object.assign(Object.assign({}, prev), { productUpdates: checked }))) })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(Label, { htmlFor: "security", className: "flex flex-col space-y-1", children: [_jsx("span", { children: "Security Alerts" }), _jsx("span", { className: "font-normal text-sm text-muted-foreground", children: "Important security related notifications" })] }), _jsx(Switch, { id: "security", checked: emailNotifications.securityAlerts, onCheckedChange: (checked) => setEmailNotifications((prev) => (Object.assign(Object.assign({}, prev), { securityAlerts: checked }))) })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(Label, { htmlFor: "recommendations", className: "flex flex-col space-y-1", children: [_jsx("span", { children: "Recommendation Alerts" }), _jsx("span", { className: "font-normal text-sm text-muted-foreground", children: "Get notified when new AI recommendations are available" })] }), _jsx(Switch, { id: "recommendations", checked: emailNotifications.recommendationAlerts, onCheckedChange: (checked) => setEmailNotifications((prev) => (Object.assign(Object.assign({}, prev), { recommendationAlerts: checked }))) })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(Label, { htmlFor: "digest", className: "flex flex-col space-y-1", children: [_jsx("span", { children: "Weekly Digest" }), _jsx("span", { className: "font-normal text-sm text-muted-foreground", children: "Weekly summary of activities and insights" })] }), _jsx(Switch, { id: "digest", checked: emailNotifications.weeklyDigest, onCheckedChange: (checked) => setEmailNotifications((prev) => (Object.assign(Object.assign({}, prev), { weeklyDigest: checked }))) })] })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Push Notifications" }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(Label, { htmlFor: "new-strategies", className: "flex flex-col space-y-1", children: [_jsx("span", { children: "New Strategies" }), _jsx("span", { className: "font-normal text-sm text-muted-foreground", children: "Get notified when new strategies are proposed" })] }), _jsx(Switch, { id: "new-strategies", checked: pushNotifications.newStrategies, onCheckedChange: (checked) => setPushNotifications((prev) => (Object.assign(Object.assign({}, prev), { newStrategies: checked }))) })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(Label, { htmlFor: "new-leads", className: "flex flex-col space-y-1", children: [_jsx("span", { children: "New Leads" }), _jsx("span", { className: "font-normal text-sm text-muted-foreground", children: "Get notified when new leads come in" })] }), _jsx(Switch, { id: "new-leads", checked: pushNotifications.newLeads, onCheckedChange: (checked) => setPushNotifications((prev) => (Object.assign(Object.assign({}, prev), { newLeads: checked }))) })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(Label, { htmlFor: "campaign-updates", className: "flex flex-col space-y-1", children: [_jsx("span", { children: "Campaign Updates" }), _jsx("span", { className: "font-normal text-sm text-muted-foreground", children: "Get notified about your campaign performance" })] }), _jsx(Switch, { id: "campaign-updates", checked: pushNotifications.campaignUpdates, onCheckedChange: (checked) => setPushNotifications((prev) => (Object.assign(Object.assign({}, prev), { campaignUpdates: checked }))) })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(Label, { htmlFor: "executive-debates", className: "flex flex-col space-y-1", children: [_jsx("span", { children: "Executive Debates" }), _jsx("span", { className: "font-normal text-sm text-muted-foreground", children: "Get notified when AI executives have new debates" })] }), _jsx(Switch, { id: "executive-debates", checked: pushNotifications.executiveDebates, onCheckedChange: (checked) => setPushNotifications((prev) => (Object.assign(Object.assign({}, prev), { executiveDebates: checked }))) })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(Label, { htmlFor: "system-alerts", className: "flex flex-col space-y-1", children: [_jsx("span", { children: "System Alerts" }), _jsx("span", { className: "font-normal text-sm text-muted-foreground", children: "Important system notifications" })] }), _jsx(Switch, { id: "system-alerts", checked: pushNotifications.systemAlerts, onCheckedChange: (checked) => setPushNotifications((prev) => (Object.assign(Object.assign({}, prev), { systemAlerts: checked }))) })] })] })] }), _jsx("div", { className: "flex justify-end", children: _jsxs(Button, { onClick: handleSaveSettings, className: "gap-2", children: [_jsx(Save, { className: "h-4 w-4" }), "Save Settings"] }) })] }), _jsx(TabsContent, { value: "history", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Notification History" }) }), _jsx(CardContent, { children: _jsx("p", { className: "text-center text-muted-foreground py-8", children: "No notifications yet. They will appear here once you receive them." }) })] }) })] })] }) })] }));
}
