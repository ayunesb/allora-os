import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertCircle, TrendingUp, Users } from "lucide-react";
import { useApiQuery } from "@/hooks/useApiQuery";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, } from "recharts";
export default function InsightsPage() {
    const [timeframe, setTimeframe] = useState("7d");
    const { data: kpiData, isLoading: isKpiLoading, error: kpiError, } = useApiQuery("/api/kpi", { timeframe });
    const { data: chartData, isLoading: isChartLoading, error: chartError, } = useApiQuery("/api/chart", { timeframe });
    const handleTimeframeChange = (newTimeframe) => {
        setTimeframe(newTimeframe);
    };
    return (_jsxs("div", { className: "container mx-auto py-6", children: [_jsxs("div", { className: "flex justify-between items-center mb-4", children: [_jsx("h1", { className: "text-2xl font-bold", children: "Dashboard Insights" }), _jsxs("div", { children: [_jsx("button", { className: `px-3 py-1 rounded-md ${timeframe === "7d" ? "bg-primary text-white" : "bg-gray-100 text-gray-700"}`, onClick: () => handleTimeframeChange("7d"), children: "7 Days" }), _jsx("button", { className: `px-3 py-1 rounded-md ml-2 ${timeframe === "30d" ? "bg-primary text-white" : "bg-gray-100 text-gray-700"}`, onClick: () => handleTimeframeChange("30d"), children: "30 Days" })] })] }), kpiError && (_jsxs(Alert, { variant: "destructive", children: [_jsx(AlertCircle, { className: "h-4 w-4" }), _jsx(AlertDescription, { children: "Failed to load KPI data. Please try again." })] })), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4 mb-6", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center", children: [_jsx(TrendingUp, { className: "mr-2 h-4 w-4" }), " Total Wins"] }) }), _jsx(CardContent, { children: isKpiLoading ? (_jsx("p", { children: "Loading..." })) : (_jsx("p", { className: "text-2xl font-bold", children: (kpiData === null || kpiData === void 0 ? void 0 : kpiData.total_wins) || 0 })) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center", children: [_jsx(TrendingUp, { className: "mr-2 h-4 w-4" }), " Total Strategies"] }) }), _jsx(CardContent, { children: isKpiLoading ? (_jsx("p", { children: "Loading..." })) : (_jsx("p", { className: "text-2xl font-bold", children: (kpiData === null || kpiData === void 0 ? void 0 : kpiData.total_strategies) || 0 })) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center", children: [_jsx(Users, { className: "mr-2 h-4 w-4" }), " Total Users"] }) }), _jsx(CardContent, { children: isKpiLoading ? (_jsx("p", { children: "Loading..." })) : (_jsx("p", { className: "text-2xl font-bold", children: (kpiData === null || kpiData === void 0 ? void 0 : kpiData.total_users) || 0 })) })] })] }), chartError && (_jsxs(Alert, { variant: "destructive", children: [_jsx(AlertCircle, { className: "h-4 w-4" }), _jsx(AlertDescription, { children: "Failed to load chart data. Please try again." })] })), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Performance Chart" }) }), _jsx(CardContent, { children: isChartLoading ? (_jsx("p", { children: "Loading chart..." })) : (_jsx(ResponsiveContainer, { width: "100%", height: 300, children: _jsxs(LineChart, { data: chartData, children: [_jsx(CartesianGrid, { strokeDasharray: "3 3" }), _jsx(XAxis, { dataKey: "name" }), _jsx(YAxis, {}), _jsx(Tooltip, {}), _jsx(Line, { type: "monotone", dataKey: "value", stroke: "#8884d8", activeDot: { r: 8 } })] }) })) })] })] }));
}
