import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, } from "@/components/ui/dialog";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Check, X, Minus, ArrowRight } from "lucide-react";
import { formatRoleTitle } from "@/utils/consultation";
import { useCompanyInsights } from "@/hooks/useCompanyInsights";
export default function InsightDetailsDialog({ insight, open, onOpenChange }) {
    const { getDetailedInsight } = useCompanyInsights();
    if (!insight) {
        return null;
    }
    const detailedInsight = getDetailedInsight(insight.id);
    return (_jsx(Dialog, { open: open, onOpenChange: onOpenChange, children: _jsxs(DialogContent, { className: "sm:max-w-[600px] max-h-[80vh] overflow-y-auto", children: [_jsxs(DialogHeader, { children: [_jsx(DialogTitle, { children: insight.title }), _jsx(DialogDescription, { children: "AI Executive Team Recommendation" })] }), _jsxs("div", { className: "space-y-6 mt-4", children: [_jsxs("div", { className: "flex items-start gap-3", children: [_jsxs(Avatar, { className: "h-12 w-12", children: [_jsx(AvatarImage, { src: insight.primaryBot.avatar, alt: insight.primaryBot.name }), _jsx(AvatarFallback, { children: insight.primaryBot.name[0] })] }), _jsxs("div", { children: [_jsxs("div", { className: "flex items-center gap-2 mb-1", children: [_jsx("h3", { className: "font-medium", children: insight.primaryBot.name }), _jsx(Badge, { variant: "outline", children: formatRoleTitle(insight.primaryBot.role) })] }), _jsx("p", { className: "text-sm text-muted-foreground", children: `Primary contributor to this ${insight.type} recommendation` })] })] }), _jsx(Separator, {}), (detailedInsight === null || detailedInsight === void 0 ? void 0 : detailedInsight.executiveSummary) && (_jsxs("div", { children: [_jsx("h4", { className: "font-medium mb-2", children: "Executive Summary" }), _jsx("p", { className: "text-sm", children: detailedInsight.executiveSummary })] })), (detailedInsight === null || detailedInsight === void 0 ? void 0 : detailedInsight.keyPoints) &&
                            detailedInsight.keyPoints.length > 0 && (_jsxs("div", { children: [_jsx("h4", { className: "font-medium mb-2", children: "Key Points" }), _jsx("ul", { className: "space-y-2", children: detailedInsight.keyPoints.map((point, index) => (_jsxs("li", { className: "flex items-start gap-2", children: [_jsx(ArrowRight, { className: "h-4 w-4 mt-0.5 text-blue-500 shrink-0" }), _jsx("span", { className: "text-sm", children: point })] }, index))) })] })), _jsxs("div", { children: [_jsx("h4", { className: "font-medium mb-2", children: "Detailed Reasoning" }), _jsx("p", { className: "text-sm", children: (detailedInsight === null || detailedInsight === void 0 ? void 0 : detailedInsight.reasoning) || insight.description })] }), (detailedInsight === null || detailedInsight === void 0 ? void 0 : detailedInsight.contributors) &&
                            detailedInsight.contributors.length > 0 && (_jsxs("div", { children: [_jsx("h4", { className: "font-medium mb-3", children: "Contributing Executives" }), _jsx("div", { className: "space-y-3", children: detailedInsight.contributors.map((contributor, index) => (_jsx(ContributorItem, { contributor: contributor }, index))) })] }))] })] }) }));
}
function ContributorItem({ contributor }) {
    return (_jsxs("div", { className: "flex items-start gap-3", children: [_jsxs("div", { className: "mt-0.5", children: [contributor.opinion === "positive" && (_jsx(Check, { className: "h-4 w-4 text-green-500" })), contributor.opinion === "negative" && (_jsx(X, { className: "h-4 w-4 text-red-500" })), contributor.opinion === "neutral" && (_jsx(Minus, { className: "h-4 w-4 text-yellow-500" }))] }), _jsxs("div", { children: [_jsxs("div", { className: "flex items-center gap-1.5", children: [_jsx("span", { className: "font-medium text-sm", children: contributor.name }), _jsxs("span", { className: "text-xs text-muted-foreground", children: ["(", formatRoleTitle(contributor.role), ")"] })] }), _jsx("p", { className: "text-xs mt-0.5 text-muted-foreground", children: contributor.contribution })] })] }));
}
