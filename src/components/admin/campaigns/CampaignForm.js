import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
const CampaignForm = ({ data, onChange, onSubmit, companies, isSubmitting, }) => {
    return (_jsxs("div", { className: "space-y-4 py-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "name", children: "Campaign Name*" }), _jsx(Input, { id: "name", value: data.name, onChange: (e) => onChange({ name: e.target.value }), placeholder: "Summer Promotion 2025" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "platform", children: "Platform" }), _jsxs(Select, { value: data.platform, onValueChange: (value) => onChange({ platform: value }), children: [_jsx(SelectTrigger, { id: "platform", children: _jsx(SelectValue, { placeholder: "Select platform" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "Email", children: "Email" }), _jsx(SelectItem, { value: "SMS", children: "SMS" }), _jsx(SelectItem, { value: "Facebook", children: "Facebook" }), _jsx(SelectItem, { value: "Google", children: "Google" }), _jsx(SelectItem, { value: "LinkedIn", children: "LinkedIn" }), _jsx(SelectItem, { value: "Twitter", children: "Twitter" }), _jsx(SelectItem, { value: "Instagram", children: "Instagram" }), _jsx(SelectItem, { value: "TikTok", children: "TikTok" }), _jsx(SelectItem, { value: "Other", children: "Other" })] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "budget", children: "Budget ($)" }), _jsx(Input, { id: "budget", type: "number", value: data.budget.toString(), onChange: (e) => onChange({ budget: parseFloat(e.target.value) || 0 }), placeholder: "1000" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "company", children: "Company*" }), _jsxs(Select, { value: data.company_id, onValueChange: (value) => onChange({ company_id: value }), children: [_jsx(SelectTrigger, { id: "company", children: _jsx(SelectValue, { placeholder: "Select company" }) }), _jsx(SelectContent, { children: companies.map((company) => (_jsx(SelectItem, { value: company.id, children: company.name }, company.id))) })] })] }), _jsx(Button, { onClick: onSubmit, disabled: isSubmitting || !data.name || !data.company_id, className: "w-full mt-4", children: isSubmitting ? (_jsxs(_Fragment, { children: [_jsx(Loader2, { className: "mr-2 h-4 w-4 animate-spin" }), "Creating..."] })) : ("Create Campaign") })] }));
};
export default CampaignForm;
