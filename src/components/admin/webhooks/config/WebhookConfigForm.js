import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Card, CardContent } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Check } from "lucide-react";
export const WebhookConfigForm = ({ webhookType, onWebhookTypeChange, stripeWebhook = "", stripeSecret = "", zapierWebhook = "", githubWebhook = "", githubSecret = "", slackWebhook = "", customWebhook = "", stripeValid = false, zapierValid = false, githubValid = false, slackValid = false, customValid = false, onSave, onDelete, onTest, }) => {
    return (_jsx(Card, { children: _jsx(CardContent, { className: "pt-6", children: _jsxs(Tabs, { value: webhookType, onValueChange: onWebhookTypeChange, children: [_jsxs(TabsList, { className: "grid w-full grid-cols-5", children: [_jsx(TabsTrigger, { value: "stripe", children: "Stripe" }), _jsx(TabsTrigger, { value: "zapier", children: "Zapier" }), _jsx(TabsTrigger, { value: "github", children: "GitHub" }), _jsx(TabsTrigger, { value: "slack", children: "Slack" }), _jsx(TabsTrigger, { value: "custom", children: "Custom" })] }), _jsxs(TabsContent, { value: "stripe", className: "space-y-4 mt-4", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "stripe-webhook", children: "Webhook ID" }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { id: "stripe-webhook", placeholder: "whsec_...", value: stripeWebhook }), stripeValid && _jsx(Check, { className: "text-green-500 mt-2" })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "stripe-secret", children: "Secret Key" }), _jsx(Input, { id: "stripe-secret", placeholder: "sk_...", type: "password", value: stripeSecret })] })] }), _jsxs("div", { className: "flex justify-end gap-2 pt-4", children: [_jsx(Button, { variant: "outline", size: "sm", onClick: () => onDelete === null || onDelete === void 0 ? void 0 : onDelete("stripe"), children: "Delete" }), _jsx(Button, { variant: "outline", size: "sm", onClick: () => onTest === null || onTest === void 0 ? void 0 : onTest("stripe"), children: "Test" }), _jsx(Button, { size: "sm", onClick: () => onSave === null || onSave === void 0 ? void 0 : onSave("stripe", {
                                            webhook: stripeWebhook,
                                            secret: stripeSecret,
                                        }), children: "Save" })] })] }), _jsxs(TabsContent, { value: "zapier", className: "space-y-4 mt-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "zapier-webhook", children: "Webhook URL" }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { id: "zapier-webhook", placeholder: "https://hooks.zapier.com/...", value: zapierWebhook }), zapierValid && _jsx(Check, { className: "text-green-500 mt-2" })] })] }), _jsxs("div", { className: "flex justify-end gap-2 pt-4", children: [_jsx(Button, { variant: "outline", size: "sm", onClick: () => onDelete === null || onDelete === void 0 ? void 0 : onDelete("zapier"), children: "Delete" }), _jsx(Button, { variant: "outline", size: "sm", onClick: () => onTest === null || onTest === void 0 ? void 0 : onTest("zapier"), children: "Test" }), _jsx(Button, { size: "sm", onClick: () => onSave === null || onSave === void 0 ? void 0 : onSave("zapier", { webhook: zapierWebhook }), children: "Save" })] })] }), _jsxs(TabsContent, { value: "github", className: "space-y-4 mt-4", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "github-webhook", children: "Webhook URL" }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { id: "github-webhook", placeholder: "https://api.github.com/repos/...", value: githubWebhook }), githubValid && _jsx(Check, { className: "text-green-500 mt-2" })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "github-secret", children: "Secret Key" }), _jsx(Input, { id: "github-secret", placeholder: "GitHub webhook secret", type: "password", value: githubSecret })] })] }), _jsxs("div", { className: "flex justify-end gap-2 pt-4", children: [_jsx(Button, { variant: "outline", size: "sm", onClick: () => onDelete === null || onDelete === void 0 ? void 0 : onDelete("github"), children: "Delete" }), _jsx(Button, { variant: "outline", size: "sm", onClick: () => onTest === null || onTest === void 0 ? void 0 : onTest("github"), children: "Test" }), _jsx(Button, { size: "sm", onClick: () => onSave === null || onSave === void 0 ? void 0 : onSave("github", {
                                            webhook: githubWebhook,
                                            secret: githubSecret,
                                        }), children: "Save" })] })] }), _jsxs(TabsContent, { value: "slack", className: "space-y-4 mt-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "slack-webhook", children: "Webhook URL" }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { id: "slack-webhook", placeholder: "https://hooks.slack.com/services/...", value: slackWebhook }), slackValid && _jsx(Check, { className: "text-green-500 mt-2" })] })] }), _jsxs("div", { className: "flex justify-end gap-2 pt-4", children: [_jsx(Button, { variant: "outline", size: "sm", onClick: () => onDelete === null || onDelete === void 0 ? void 0 : onDelete("slack"), children: "Delete" }), _jsx(Button, { variant: "outline", size: "sm", onClick: () => onTest === null || onTest === void 0 ? void 0 : onTest("slack"), children: "Test" }), _jsx(Button, { size: "sm", onClick: () => onSave === null || onSave === void 0 ? void 0 : onSave("slack", { webhook: slackWebhook }), children: "Save" })] })] }), _jsxs(TabsContent, { value: "custom", className: "space-y-4 mt-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "custom-webhook", children: "Webhook URL" }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { id: "custom-webhook", placeholder: "https://your-api.com/webhook", value: customWebhook }), customValid && _jsx(Check, { className: "text-green-500 mt-2" })] }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Custom webhooks can be used to integrate with any service that accepts HTTP requests." })] }), _jsxs("div", { className: "flex justify-end gap-2 pt-4", children: [_jsx(Button, { variant: "outline", size: "sm", onClick: () => onDelete === null || onDelete === void 0 ? void 0 : onDelete("custom"), children: "Delete" }), _jsx(Button, { variant: "outline", size: "sm", onClick: () => onTest === null || onTest === void 0 ? void 0 : onTest("custom"), children: "Test" }), _jsx(Button, { size: "sm", onClick: () => onSave === null || onSave === void 0 ? void 0 : onSave("custom", { webhook: customWebhook }), children: "Save" })] })] })] }) }) }));
};
