import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Loader2, Users, Pencil, Trash2 } from "lucide-react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger, } from "@/components/ui/tooltip";
export const CompanyTable = ({ companies, isLoading, onViewUsers, onEditCompany, onDeleteCompany, }) => {
    if (isLoading) {
        return (_jsx("div", { className: "flex justify-center items-center py-8", children: _jsx(Loader2, { className: "h-8 w-8 animate-spin text-primary" }) }));
    }
    return (_jsx(TooltipProvider, { children: _jsxs(Table, { children: [_jsx(TableHeader, { children: _jsxs(TableRow, { children: [_jsx(TableHead, { children: "Name" }), _jsx(TableHead, { children: "Industry" }), _jsx(TableHead, { children: "Created" }), _jsx(TableHead, { children: "Actions" })] }) }), _jsx(TableBody, { children: companies.length === 0 ? (_jsx(TableRow, { children: _jsx(TableCell, { colSpan: 4, className: "text-center py-8 text-muted-foreground", children: "No companies found. Add your first company to get started." }) })) : (companies.map((company) => (_jsxs(TableRow, { children: [_jsx(TableCell, { className: "font-medium", children: company.name }), _jsx(TableCell, { children: company.industry || "Not specified" }), _jsx(TableCell, { children: new Date(company.created_at).toLocaleDateString() }), _jsx(TableCell, { children: _jsxs("div", { className: "flex space-x-2", children: [_jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsxs(Button, { variant: "ghost", size: "sm", onClick: () => onViewUsers(company.id), children: [_jsx(Users, { className: "h-4 w-4 mr-1" }), "Users"] }) }), _jsx(TooltipContent, { children: "View company users" })] }), onEditCompany && (_jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsxs(Button, { variant: "ghost", size: "sm", onClick: () => onEditCompany(company), children: [_jsx(Pencil, { className: "h-4 w-4 mr-1" }), "Edit"] }) }), _jsx(TooltipContent, { children: "Edit company details" })] })), onDeleteCompany && (_jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsxs(Button, { variant: "ghost", size: "sm", className: "text-destructive hover:bg-destructive/10", onClick: () => onDeleteCompany(company.id), children: [_jsx(Trash2, { className: "h-4 w-4 mr-1" }), "Delete"] }) }), _jsx(TooltipContent, { children: "Delete this company" })] }))] }) })] }, company.id)))) })] }) }));
};
