import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "@/components/ui/select";
import { Card, CardContent } from "@/components/ui/card";
import { MessageSquare, Book, ListChecks, Target } from "lucide-react";
export default function ResponseStylePreferences({ preferences, updatePreference, }) {
    return (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { children: [_jsxs(Label, { className: "flex items-center gap-2 mb-3", children: [_jsx(MessageSquare, { className: "h-4 w-4 text-blue-500" }), "Response Style"] }), _jsxs(RadioGroup, { value: preferences.responseStyle || "balanced", onValueChange: (value) => updatePreference("responseStyle", value), className: "space-y-3", children: [_jsxs("div", { className: "flex items-start space-x-2", children: [_jsx(RadioGroupItem, { value: "concise", id: "concise", className: "mt-1" }), _jsxs("div", { className: "grid gap-1.5", children: [_jsx(Label, { htmlFor: "concise", className: "font-medium", children: "Concise" }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Brief, to-the-point responses focusing on key information only" })] })] }), _jsxs("div", { className: "flex items-start space-x-2", children: [_jsx(RadioGroupItem, { value: "balanced", id: "balanced", className: "mt-1" }), _jsxs("div", { className: "grid gap-1.5", children: [_jsx(Label, { htmlFor: "balanced", className: "font-medium", children: "Balanced" }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Moderate level of detail with a good mix of information and brevity" })] })] }), _jsxs("div", { className: "flex items-start space-x-2", children: [_jsx(RadioGroupItem, { value: "detailed", id: "detailed", className: "mt-1" }), _jsxs("div", { className: "grid gap-1.5", children: [_jsx(Label, { htmlFor: "detailed", className: "font-medium", children: "Detailed" }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Comprehensive responses with thorough explanations and examples" })] })] })] })] }), _jsx(Card, { className: "border-dashed", children: _jsxs(CardContent, { className: "pt-6 space-y-4", children: [_jsxs("div", { children: [_jsxs(Label, { htmlFor: "technicalLevel", className: "flex items-center gap-2 mb-2", children: [_jsx(Book, { className: "h-4 w-4 text-purple-500" }), "Technical Level"] }), _jsxs(Select, { value: preferences.technicalLevel || "intermediate", onValueChange: (value) => updatePreference("technicalLevel", value), children: [_jsx(SelectTrigger, { id: "technicalLevel", children: _jsx(SelectValue, { placeholder: "Select technical level" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "basic", children: "Basic (Simplified Explanations)" }), _jsx(SelectItem, { value: "intermediate", children: "Intermediate (Balanced)" }), _jsx(SelectItem, { value: "advanced", children: "Advanced (Technical Details)" })] })] }), _jsx("p", { className: "text-sm text-muted-foreground mt-1", children: "Choose how technical you want the AI to be in its responses" })] }), _jsxs("div", { className: "flex items-center justify-between pt-2", children: [_jsxs("div", { className: "space-y-0.5", children: [_jsxs(Label, { htmlFor: "showSources", className: "flex items-center gap-2", children: [_jsx(ListChecks, { className: "h-4 w-4 text-green-500" }), "Show Sources & References"] }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Include citations and reference information in responses" })] }), _jsx(Switch, { id: "showSources", checked: preferences.showSources || false, onCheckedChange: (checked) => updatePreference("showSources", checked) })] }), _jsxs("div", { children: [_jsxs(Label, { htmlFor: "focusArea", className: "flex items-center gap-2 mb-2", children: [_jsx(Target, { className: "h-4 w-4 text-red-500" }), "Focus Area"] }), _jsxs(Select, { value: preferences.focusArea || "general", onValueChange: (value) => updatePreference("focusArea", value), children: [_jsx(SelectTrigger, { id: "focusArea", children: _jsx(SelectValue, { placeholder: "Select focus area" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "general", children: "General Business" }), _jsx(SelectItem, { value: "strategy", children: "Strategy & Planning" }), _jsx(SelectItem, { value: "marketing", children: "Marketing & Sales" }), _jsx(SelectItem, { value: "operations", children: "Operations & Execution" }), _jsx(SelectItem, { value: "technology", children: "Technology & Innovation" }), _jsx(SelectItem, { value: "finance", children: "Finance & Investment" })] })] }), _jsx("p", { className: "text-sm text-muted-foreground mt-1", children: "Prioritize which area executives should focus their expertise on" })] })] }) })] }));
}
