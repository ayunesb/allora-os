import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Drawer, DrawerClose, DrawerContent, DrawerDescription, DrawerFooter, DrawerHeader, DrawerTitle, } from "@/components/ui/drawer";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { LeadStatusBadge } from "@/components/admin/leads/LeadStatusBadge";
import { LeadScoreBadge } from "./LeadScoreBadge";
import { Mail, Phone, CalendarClock, LayoutList, ArrowRightCircle, } from "lucide-react";
export const LeadProfileDrawer = ({ children, variant = "default", size = "large", }) => {
    var _a;
    const leadScore = getLeadScore(lead);
    const nextAction = getNextBestAction(lead);
    return (_jsx(Drawer, { open: open, onOpenChange: onOpenChange, children: _jsxs(DrawerContent, { className: "max-h-[85vh]", children: [_jsxs(DrawerHeader, { children: [_jsx(DrawerTitle, { className: "text-xl", children: lead.name }), _jsx(DrawerDescription, { children: _jsxs("div", { className: "flex flex-wrap items-center gap-2 mt-2", children: [_jsx(LeadStatusBadge, { status: lead.status }), _jsx(LeadScoreBadge, { score: leadScore }), ((_a = lead.campaigns) === null || _a === void 0 ? void 0 : _a.name) && (_jsxs("div", { className: "text-xs rounded-md bg-gray-100 dark:bg-gray-800 px-2 py-1", children: [_jsx(LayoutList, { className: "inline h-3 w-3 mr-1" }), lead.campaigns.name] }))] }) })] }), _jsxs("div", { className: "p-4 space-y-6 overflow-auto", children: [_jsxs("div", { className: "space-y-3", children: [_jsx("h3", { className: "text-sm font-semibold", children: "Contact Information" }), lead.email || lead.phone ? (_jsxs("div", { className: "space-y-2", children: [lead.email && (_jsxs("div", { className: "flex items-center text-sm", children: [_jsx(Mail, { className: "h-4 w-4 mr-3 text-muted-foreground" }), _jsx("a", { href: `mailto:${lead.email}`, className: "hover:underline", children: lead.email })] })), lead.phone && (_jsxs("div", { className: "flex items-center text-sm", children: [_jsx(Phone, { className: "h-4 w-4 mr-3 text-muted-foreground" }), _jsx("a", { href: `tel:${lead.phone}`, className: "hover:underline", children: lead.phone })] }))] })) : (_jsx("p", { className: "text-sm text-muted-foreground", children: "No contact information provided" }))] }), _jsx(Separator, {}), _jsxs("div", { className: "space-y-3", children: [_jsx("h3", { className: "text-sm font-semibold", children: "Lead Details" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center text-sm", children: [_jsx(CalendarClock, { className: "h-4 w-4 mr-3 text-muted-foreground" }), _jsxs("span", { children: ["Added on ", new Date(lead.created_at).toLocaleDateString()] })] }), _jsxs("div", { className: "flex items-center text-sm", children: [_jsx(ArrowRightCircle, { className: "h-4 w-4 mr-3 text-muted-foreground" }), _jsxs("span", { children: [_jsx("span", { className: "font-medium", children: "Next action:" }), " ", nextAction] })] })] })] }), _jsx(Separator, {}), _jsxs("div", { className: "space-y-3", children: [_jsx("h3", { className: "text-sm font-semibold", children: "Update Status" }), _jsxs("div", { className: "flex flex-wrap gap-2", children: [_jsx(Button, { size: "sm", variant: lead.status === "new" ? "default" : "outline", onClick: () => onStatusUpdate(lead.id, "new"), children: "New" }), _jsx(Button, { size: "sm", variant: lead.status === "contacted" ? "default" : "outline", onClick: () => onStatusUpdate(lead.id, "contacted"), children: "Contacted" }), _jsx(Button, { size: "sm", variant: lead.status === "qualified" ? "default" : "outline", onClick: () => onStatusUpdate(lead.id, "qualified"), children: "Qualified" }), _jsx(Button, { size: "sm", variant: lead.status === "proposal" ? "default" : "outline", onClick: () => onStatusUpdate(lead.id, "proposal"), children: "Proposal" }), _jsx(Button, { size: "sm", variant: lead.status === "negotiation" ? "default" : "outline", onClick: () => onStatusUpdate(lead.id, "negotiation"), children: "Negotiation" }), _jsx(Button, { size: "sm", variant: lead.status === "client" ? "default" : "outline", onClick: () => onStatusUpdate(lead.id, "client"), children: "Client" }), _jsx(Button, { size: "sm", variant: lead.status === "lost" ? "default" : "outline", onClick: () => onStatusUpdate(lead.id, "lost"), children: "Lost" })] })] })] }), _jsxs(DrawerFooter, { className: "border-t", children: [_jsx(Button, { variant: "destructive", onClick: () => {
                                onDelete(lead.id);
                                onOpenChange(false);
                            }, children: "Delete Lead" }), _jsx(DrawerClose, { asChild: true, children: _jsx(Button, { variant: "outline", children: "Close" }) })] })] }) }));
};
