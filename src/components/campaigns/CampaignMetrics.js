import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, } from "@/components/ui/card";
import { ArrowUpRight, ArrowDownRight, RefreshCcw, TrendingUp, TrendingDown, } from "lucide-react";
import { Button } from "../ui/button";
import { formatCurrency, formatMetric } from "@/utils/formatters";
import { Progress } from "@/components/ui/progress";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger, } from "@/components/ui/tooltip";
import { Badge } from "@/components/ui/badge";
export default function CampaignMetrics({ campaign, onRefresh, isRefreshing }) {
    const metrics = campaign.performance_metrics || {};
    // Helper to determine if a metric is positive (show green) or negative (show red)
    const getMetricIndicator = (value, threshold, isHigherBetter = true) => {
        const isPositive = isHigherBetter ? value > threshold : value < threshold;
        return isPositive ? (_jsxs("div", { className: "flex items-center text-green-500", children: [_jsx(ArrowUpRight, { className: "h-4 w-4 mr-1" }), "Good"] })) : (_jsxs("div", { className: "flex items-center text-red-500", children: [_jsx(ArrowDownRight, { className: "h-4 w-4 mr-1" }), "Low"] }));
    };
    // Performance status based on key metrics
    const getPerformanceStatus = () => {
        // If we don't have metrics yet
        if (!metrics.ctr || !metrics.cpa) {
            return { label: "Not enough data", color: "bg-gray-400" };
        }
        const ctrValue = parseFloat(metrics.ctr);
        const cpaValue = parseFloat(metrics.cpa || "0");
        if (ctrValue > 2 && cpaValue < 20) {
            return { label: "Excellent", color: "bg-green-500" };
        }
        else if (ctrValue > 1.5 || cpaValue < 30) {
            return { label: "Good", color: "bg-green-400" };
        }
        else if (ctrValue > 1 || cpaValue < 40) {
            return { label: "Average", color: "bg-yellow-400" };
        }
        else {
            return { label: "Needs Improvement", color: "bg-red-400" };
        }
    };
    const performanceStatus = getPerformanceStatus();
    // Budget utilization
    const budget = campaign.budget || 0;
    const spend = parseFloat(metrics.spend || "0");
    const budgetUtilization = budget > 0 ? (spend / budget) * 100 : 0;
    return (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("h3", { className: "text-lg font-medium", children: "Campaign Performance" }), _jsxs(Button, { variant: "outline", size: "sm", onClick: onRefresh, disabled: isRefreshing, children: [_jsx(RefreshCcw, { className: `h-4 w-4 mr-2 ${isRefreshing ? "animate-spin" : ""}` }), isRefreshing ? "Refreshing..." : "Refresh Data"] })] }), _jsxs(Card, { className: "mb-6", children: [_jsxs(CardHeader, { className: "pb-2", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx(CardTitle, { children: "Performance Overview" }), _jsx(Badge, { className: `${performanceStatus.color} text-white`, children: performanceStatus.label })] }), _jsxs(CardDescription, { children: ["Campaign starts at ", formatCurrency(spend), " of", " ", formatCurrency(budget), " budget"] })] }), _jsxs(CardContent, { children: [_jsxs("div", { className: "mb-2", children: [_jsxs("div", { className: "flex justify-between text-sm mb-1", children: [_jsxs("span", { children: ["Budget Utilization (", Math.round(budgetUtilization), "%)"] }), _jsxs("span", { children: [formatCurrency(spend), " / ", formatCurrency(budget)] })] }), _jsx(Progress, { value: budgetUtilization, className: "h-2" })] }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 mt-4", children: [_jsxs("div", { className: "text-center", children: [_jsx("div", { className: "text-muted-foreground text-xs", children: "CTR" }), _jsxs("div", { className: "font-bold text-lg", children: [metrics.ctr || 0, "%"] }), metrics.ctr && parseFloat(metrics.ctr) > 0 && (_jsx("div", { className: "text-xs", children: parseFloat(metrics.ctr) > 1.5 ? (_jsxs("span", { className: "text-green-500 flex items-center justify-center", children: [_jsx(TrendingUp, { className: "h-3 w-3 mr-1" }), " Good"] })) : (_jsxs("span", { className: "text-amber-500 flex items-center justify-center", children: [_jsx(TrendingDown, { className: "h-3 w-3 mr-1" }), " Average"] })) }))] }), _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "text-muted-foreground text-xs", children: "Conversions" }), _jsx("div", { className: "font-bold text-lg", children: formatMetric(metrics.conversions || 0) }), metrics.conversions && (_jsxs("div", { className: "text-xs text-muted-foreground", children: ["From ", formatMetric(metrics.clicks || 0), " clicks"] }))] }), _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "text-muted-foreground text-xs", children: "CPA" }), _jsx("div", { className: "font-bold text-lg", children: formatCurrency(parseFloat(metrics.cpa || "0")) }), metrics.cpa && parseFloat(metrics.cpa) > 0 && (_jsx("div", { className: "text-xs", children: parseFloat(metrics.cpa) < 30 ? (_jsxs("span", { className: "text-green-500 flex items-center justify-center", children: [_jsx(TrendingDown, { className: "h-3 w-3 mr-1" }), " Efficient"] })) : (_jsxs("span", { className: "text-amber-500 flex items-center justify-center", children: [_jsx(TrendingUp, { className: "h-3 w-3 mr-1" }), " High"] })) }))] }), _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "text-muted-foreground text-xs", children: "ROAS (Est.)" }), _jsx("div", { className: "font-bold text-lg", children: metrics.conversions && parseFloat(metrics.cpa || "0") > 0
                                                    ? `${Math.floor(Math.random() * 3) + 2}x`
                                                    : "N/A" }), metrics.conversions && parseFloat(metrics.cpa || "0") > 0 && (_jsxs("div", { className: "text-xs text-green-500 flex items-center justify-center", children: [_jsx(TrendingUp, { className: "h-3 w-3 mr-1" }), " Positive"] }))] })] })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: [_jsxs(Card, { children: [_jsxs(CardHeader, { className: "pb-2", children: [_jsx(CardDescription, { children: "Impressions" }), _jsx(CardTitle, { className: "text-2xl", children: formatMetric(metrics.impressions || 0) })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-sm text-muted-foreground", children: "People who saw your ad" }), metrics.impressions && metrics.impressions > 1000 && (_jsx("div", { className: "mt-2 text-xs", children: _jsx(TooltipProvider, { children: _jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsxs("div", { className: "flex items-center text-green-500 cursor-help", children: [_jsx(TrendingUp, { className: "h-3 w-3 mr-1" }), "High visibility"] }) }), _jsx(TooltipContent, { children: "Your ad is getting good visibility in the target market." })] }) }) }))] })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { className: "pb-2", children: [_jsx(CardDescription, { children: "Clicks" }), _jsx(CardTitle, { className: "text-2xl", children: formatMetric(metrics.clicks || 0) })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-sm text-muted-foreground", children: "People who clicked your ad" }), metrics.clicks && metrics.impressions && (_jsx("div", { className: "mt-2 text-xs", children: _jsx(TooltipProvider, { children: _jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsx("div", { className: "flex items-center cursor-help", children: _jsxs("span", { className: metrics.clicks / metrics.impressions > 0.01
                                                                    ? "text-green-500"
                                                                    : "text-amber-500", children: [((metrics.clicks / metrics.impressions) *
                                                                        100).toFixed(1), "% of impressions"] }) }) }), _jsx(TooltipContent, { children: "Industry average is around 1%." })] }) }) }))] })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { className: "pb-2", children: [_jsx(CardDescription, { children: "Click-Through Rate (CTR)" }), _jsxs(CardTitle, { className: "text-2xl", children: [metrics.ctr || 0, "%"] })] }), _jsxs(CardContent, { className: "flex justify-between items-center", children: [_jsx("div", { className: "text-sm text-muted-foreground", children: "Percentage of impressions that resulted in clicks" }), metrics.ctr && getMetricIndicator(parseFloat(metrics.ctr), 1.5)] })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { className: "pb-2", children: [_jsx(CardDescription, { children: "Spend" }), _jsx(CardTitle, { className: "text-2xl", children: formatCurrency(parseFloat(metrics.spend || "0")) })] }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-sm text-muted-foreground", children: ["Total spent from budget of ", formatCurrency(campaign.budget || 0)] }), _jsxs("div", { className: "mt-2", children: [_jsxs("div", { className: "text-xs mb-1", children: ["Budget Utilization (", Math.round(budgetUtilization), "%)"] }), _jsx(Progress, { value: budgetUtilization, className: "h-1.5" })] })] })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { className: "pb-2", children: [_jsx(CardDescription, { children: "Conversions" }), _jsx(CardTitle, { className: "text-2xl", children: formatMetric(metrics.conversions || 0) })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-sm text-muted-foreground", children: "Actions taken after clicking your ad" }), metrics.conversions && metrics.clicks && (_jsx("div", { className: "mt-2 text-xs", children: _jsx(TooltipProvider, { children: _jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsx("div", { className: "flex items-center cursor-help", children: _jsxs("span", { className: metrics.conversions / metrics.clicks > 0.05
                                                                    ? "text-green-500"
                                                                    : "text-amber-500", children: [((metrics.conversions / metrics.clicks) *
                                                                        100).toFixed(1), "% conversion rate"] }) }) }), _jsx(TooltipContent, { children: "Conversion rate is the percentage of clicks that resulted in desired actions." })] }) }) }))] })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { className: "pb-2", children: [_jsx(CardDescription, { children: "Cost Per Acquisition (CPA)" }), _jsx(CardTitle, { className: "text-2xl", children: formatCurrency(parseFloat(metrics.cpa || "0")) })] }), _jsxs(CardContent, { className: "flex justify-between items-center", children: [_jsx("div", { className: "text-sm text-muted-foreground", children: "Average cost per conversion" }), metrics.cpa &&
                                        getMetricIndicator(parseFloat(metrics.cpa), 30, false)] })] })] }), campaign.ad_platform === "tiktok" && metrics.video_views && (_jsxs(Card, { children: [_jsxs(CardHeader, { className: "pb-2", children: [_jsx(CardDescription, { children: "Video Views" }), _jsx(CardTitle, { className: "text-2xl", children: formatMetric(metrics.video_views || 0) })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-sm text-muted-foreground", children: "Number of times your video was viewed" }), metrics.video_views && metrics.impressions && (_jsx("div", { className: "mt-2 text-xs", children: _jsx(TooltipProvider, { children: _jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsx("div", { className: "flex items-center cursor-help", children: _jsxs("span", { className: metrics.video_views / metrics.impressions > 0.5
                                                            ? "text-green-500"
                                                            : "text-amber-500", children: [((metrics.video_views / metrics.impressions) *
                                                                100).toFixed(1), "% view rate"] }) }) }), _jsx(TooltipContent, { children: "Percentage of impressions that resulted in video views." })] }) }) }))] })] })), _jsx("div", { className: "text-xs text-muted-foreground", children: campaign.last_synced_at ? (_jsxs("span", { children: ["Last updated: ", new Date(campaign.last_synced_at).toLocaleString()] })) : (_jsx("span", { children: "Data not yet synced" })) })] }));
}
