import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, } from "@/components/ui/table";
import { formatNumber, formatCurrency } from "@/utils/formatters";
export function PerformanceTable({ data, totalMetrics }) {
    // Calculate percentages of total for each row if totalMetrics is provided
    const calculatePercentage = (value, total) => {
        if (!total)
            return 0;
        return (value / total) * 100;
    };
    return (_jsx("div", { className: "overflow-auto", children: _jsxs(Table, { children: [_jsx(TableHeader, { children: _jsxs(TableRow, { children: [_jsx(TableHead, { children: "Channel" }), _jsx(TableHead, { className: "text-right", children: "Impressions" }), _jsx(TableHead, { className: "text-right", children: "Clicks" }), _jsx(TableHead, { className: "text-right", children: "CTR" }), _jsx(TableHead, { className: "text-right", children: "Conversions" }), _jsx(TableHead, { className: "text-right", children: "Conv. Rate" }), _jsx(TableHead, { className: "text-right", children: "Cost" }), _jsx(TableHead, { className: "text-right", children: "Revenue" }), _jsx(TableHead, { className: "text-right", children: "ROI" })] }) }), _jsxs(TableBody, { children: [data.map((channel, index) => (_jsxs(TableRow, { children: [_jsx(TableCell, { className: "font-medium", children: channel.channelName }), _jsx(TableCell, { className: "text-right", children: formatNumber(channel.metrics.impressions) }), _jsx(TableCell, { className: "text-right", children: formatNumber(channel.metrics.clicks) }), _jsxs(TableCell, { className: "text-right", children: [(channel.metrics.ctr * 100).toFixed(2), "%"] }), _jsx(TableCell, { className: "text-right", children: formatNumber(channel.metrics.conversions) }), _jsxs(TableCell, { className: "text-right", children: [(channel.metrics.conversionRate * 100).toFixed(2), "%"] }), _jsx(TableCell, { className: "text-right", children: formatCurrency(channel.metrics.cost) }), _jsx(TableCell, { className: "text-right", children: formatCurrency(channel.metrics.revenue) }), _jsxs(TableCell, { className: "text-right", children: [(channel.metrics.roi * 100).toFixed(0), "%"] })] }, index))), totalMetrics && (_jsxs(TableRow, { className: "font-bold bg-muted/50", children: [_jsx(TableCell, { children: "Total" }), _jsx(TableCell, { className: "text-right", children: formatNumber(totalMetrics.totalImpressions) }), _jsx(TableCell, { className: "text-right", children: formatNumber(totalMetrics.totalClicks) }), _jsxs(TableCell, { className: "text-right", children: [((totalMetrics.totalClicks / totalMetrics.totalImpressions) *
                                            100).toFixed(2), "%"] }), _jsx(TableCell, { className: "text-right", children: formatNumber(totalMetrics.totalConversions) }), _jsxs(TableCell, { className: "text-right", children: [((totalMetrics.totalConversions / totalMetrics.totalClicks) *
                                            100).toFixed(2), "%"] }), _jsx(TableCell, { className: "text-right", children: formatCurrency(totalMetrics.totalCost) }), _jsx(TableCell, { className: "text-right", children: formatCurrency(totalMetrics.totalRevenue) }), _jsxs(TableCell, { className: "text-right", children: [((totalMetrics.totalRevenue / totalMetrics.totalCost - 1) *
                                            100).toFixed(0), "%"] })] }))] })] }) }));
}
