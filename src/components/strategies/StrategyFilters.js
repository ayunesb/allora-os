import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Search, SlidersHorizontal } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, } from "@/components/ui/dropdown-menu";
import { useBreakpoint } from "@/hooks/use-mobile";
const StrategyFilters = ({ searchQuery, setSearchQuery, riskFilter, setRiskFilter, sortBy, setSortBy, }) => {
    const breakpoint = useBreakpoint();
    const isMobileOrTablet = breakpoint === "mobile" || breakpoint === "tablet";
    return (_jsxs("div", { className: "flex flex-col sm:flex-row gap-4 mb-6", children: [_jsxs("div", { className: "relative flex-grow", children: [_jsx(Search, { className: "absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" }), _jsx(Input, { placeholder: "Search strategies...", className: "pl-8", value: searchQuery, onChange: (e) => setSearchQuery(e.target.value) })] }), _jsxs("div", { className: `flex ${isMobileOrTablet ? "w-full" : ""} gap-2`, children: [_jsxs(Select, { value: riskFilter, onValueChange: setRiskFilter, children: [_jsx(SelectTrigger, { className: isMobileOrTablet ? "flex-1" : "w-[140px]", children: _jsx(SelectValue, { placeholder: "Risk Level" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all", children: "All Risks" }), _jsx(SelectItem, { value: "Low", children: "Low Risk" }), _jsx(SelectItem, { value: "Medium", children: "Medium Risk" }), _jsx(SelectItem, { value: "High", children: "High Risk" })] })] }), _jsxs(DropdownMenu, { children: [_jsx(DropdownMenuTrigger, { asChild: true, children: _jsxs(Button, { variant: "outline", className: "gap-2", children: [_jsx(SlidersHorizontal, { className: "h-4 w-4" }), !isMobileOrTablet && "Sort"] }) }), _jsxs(DropdownMenuContent, { align: "end", children: [_jsx(DropdownMenuItem, { onClick: () => setSortBy("newest"), className: sortBy === "newest" ? "bg-accent" : "", children: "Newest First" }), _jsx(DropdownMenuItem, { onClick: () => setSortBy("oldest"), className: sortBy === "oldest" ? "bg-accent" : "", children: "Oldest First" }), _jsx(DropdownMenuItem, { onClick: () => setSortBy("alphabetical"), className: sortBy === "alphabetical" ? "bg-accent" : "", children: "Alphabetical" }), _jsx(DropdownMenuItem, { onClick: () => setSortBy("risk"), className: sortBy === "risk" ? "bg-accent" : "", children: "By Risk Level" })] })] })] })] }));
};
export default StrategyFilters;
